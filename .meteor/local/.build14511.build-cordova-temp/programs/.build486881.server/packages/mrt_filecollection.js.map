{"version":3,"file":"/packages/mrt:filecollection.js","sources":["mrt:filecollection/gridFS.coffee","mrt:filecollection/server_shared.coffee","mrt:filecollection/gridFS_server.coffee","mrt:filecollection/resumable_server.coffee","mrt:filecollection/http_access_server.coffee"],"names":[],"mappings":"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","sourcesContent":["############################################################################\n#     Copyright (C) 2014 by Vaughn Iverson\n#     fileCollection is free software released under the MIT/X11 license.\n#     See included LICENSE file for details.\n############################################################################\n\nshare.defaultChunkSize = 2*1024*1024\nshare.defaultRoot = 'fs'\n\nshare.insert_func = (file = {}, chunkSize) ->\n   try\n      id = new Meteor.Collection.ObjectID(\"#{file._id}\")\n   catch\n      id = new Meteor.Collection.ObjectID()\n   subFile = {}\n   subFile._id = id\n   subFile.length = 0\n   subFile.md5 = 'd41d8cd98f00b204e9800998ecf8427e'\n   subFile.uploadDate = new Date()\n   subFile.chunkSize = chunkSize\n   subFile.filename = file.filename ? ''\n   subFile.metadata = file.metadata ? {}\n   subFile.aliases = file.aliases ? []\n   subFile.contentType = file.contentType ? 'application/octet-stream'\n   return subFile\n","############################################################################\n#     Copyright (C) 2014 by Vaughn Iverson\n#     fileCollection is free software released under the MIT/X11 license.\n#     See included LICENSE file for details.\n############################################################################\n\nif Meteor.isServer\n\n   share.check_allow_deny = (type, userId, file, fields) ->\n\n      checkRules = (rules) ->\n         res = false\n         for func in rules[type] when not res\n            res = func(userId, file, fields)\n         return res\n\n      result = not checkRules(@denys) and checkRules(@allows)\n      return result\n\n   share.bind_env = (func) ->\n      if func?\n         return Meteor.bindEnvironment func, (err) -> throw err\n      else\n         return func\n\n   share.find_mime_boundary = (req) ->\n      RE_BOUNDARY = /^multipart\\/.+?(?:; boundary=(?:(?:\"(.+)\")|(?:([^\\s]+))))$/i\n      result = RE_BOUNDARY.exec req.headers['content-type']\n      result?[1] or result?[2]","############################################################################\n#     Copyright (C) 2014 by Vaughn Iverson\n#     fileCollection is free software released under the MIT/X11 license.\n#     See included LICENSE file for details.\n############################################################################\n\nif Meteor.isServer\n\n   mongodb = Npm.require 'mongodb'\n   grid = Npm.require 'gridfs-locking-stream'\n   gridLocks = Npm.require 'gridfs-locks'\n   fs = Npm.require 'fs'\n   path = Npm.require 'path'\n   dicer = Npm.require 'dicer'\n   express = Npm.require 'express'\n\n   class FileCollection extends Meteor.Collection\n\n      constructor: (@root = share.defaultRoot, options = {}) ->\n         unless @ instanceof FileCollection\n            return new FileCollection(@root, options)\n\n         if typeof @root is 'object'\n            options = @root\n            @root = share.defaultRoot\n\n         @chunkSize = options.chunkSize ? share.defaultChunkSize\n\n         @db = Meteor._wrapAsync(mongodb.MongoClient.connect)(process.env.MONGO_URL,{})\n\n         @lockOptions =\n            timeOut: options.locks?.timeOut ? 360\n            lockExpiration: options.locks?.lockExpiration ? 90\n            pollingInterval: options.locks?.pollingInterval ? 5\n\n         @locks = gridLocks.LockCollection @db,\n            root: @root\n            timeOut: @lockOptions.timeOut\n            lockExpiration: @lockOptions.lockExpiration\n            pollingInterval: @lockOptions.pollingInterval\n\n         @gfs = new grid(@db, mongodb, @root)\n\n         # Make an index on md5, to support GET requests\n         @gfs.files.ensureIndex [['md5', 1]], (err, ret) ->\n            throw err if err\n         # Make an index on aliases, to support alternative GET requests\n         @gfs.files.ensureIndex [['aliases', 1]], (err, ret) ->\n            throw err if err\n\n         @baseURL = options.baseURL ? \"/gridfs/#{@root}\"\n\n         # if there are HTTP options, setup the express HTTP access point(s)\n         if options.resumable or options.http\n            share.setupHttpAccess.bind(@)(options)\n\n         # Default client allow/deny permissions\n         @allows = { read: [], insert: [], write: [], remove: [] }\n         @denys = { read: [], insert: [], write: [], remove: [] }\n\n         # Call super's constructor\n         super @root + '.files', { idGeneration: 'MONGO' }\n\n         # Setup specific allow/deny rules for gridFS, and tie-in the application settings\n\n         FileCollection.__super__.allow.bind(@)\n            # Because allow rules are not guaranteed to run,\n            # all checking is done in the deny rules below\n            insert: (userId, file) => true\n            remove: (userId, file) => true\n\n         FileCollection.__super__.deny.bind(@)\n\n            insert: (userId, file) =>\n\n               # Make darn sure we're creating a valid gridFS .files document\n               check file,\n                  _id: Meteor.Collection.ObjectID\n                  length: Match.Where (x) =>\n                     check x, Match.Integer\n                     x is 0\n                  md5: Match.Where (x) =>\n                     check x, String\n                     x is 'd41d8cd98f00b204e9800998ecf8427e' # The md5 of an empty file\n                  uploadDate: Date\n                  chunkSize: Match.Where (x) =>\n                     check x, Match.Integer\n                     x is @chunkSize\n                  filename: String\n                  contentType: String\n                  aliases: [ String ]\n                  metadata: Object\n\n               # Enforce a uniform chunkSize\n               unless file.chunkSize is @chunkSize\n                  console.warn \"Invalid chunksize\"\n                  return true\n\n               # call application rules\n               if share.check_allow_deny.bind(@) 'insert', userId, file\n                  return false\n\n               return true\n\n            update: (userId, file, fields) =>\n               ## Cowboy updates are not currently allowed from the client. Too much to screw up.\n               ## For example, if you store file ownership info in a sub document under 'metadata'\n               ## it will be complicated to guard against that being changed if you allow other parts\n               ## of the metadata sub doc to be updated. Write specific Meteor methods instead to\n               ## allow reasonable changes to the \"metadata\" parts of the gridFS file record.\n               return true\n\n            remove: (userId, file) =>\n               # call application rules\n               if share.check_allow_deny.bind(@) 'remove', userId, file\n                  # This causes the file data itself to be removed from gridFS\n                  @remove file\n                  return false\n\n               return true\n\n      # Register application allow rules\n      allow: (allowOptions) ->\n         if 'update' of allowOptions\n            if allowOptions.write?\n               throw new Error 'Specifying both \"update\" and \"write\" allow rules is not permitted. Use \"write\" rules only.'\n            allowOptions.write = allowOptions.update\n            delete allowOptions.update\n            console.warn '***********************************************************************'\n            console.warn '** \"update\" allow/deny rules on fileCollections are now deprecated for'\n            console.warn '** use in securing HTTP POST/PUT requests. \"write\" allow/deny rules'\n            console.warn '** should be used instead.'\n            console.warn '**'\n            console.warn '** As of v0.3.0 all fileCollections implementing \"update\" allow/deny'\n            console.warn '** rules will begin returning 403 errors for POST/PUT requests.'\n            console.warn '**'\n            console.warn '** See:'\n            console.warn '** https://github.com/vsivsi/meteor-file-collection/#fcallowoptions'\n            console.warn '***********************************************************************'\n         for type, func of allowOptions\n            unless type of @allows\n               throw new Error \"Unrecognized allow rule type '#{type}'.\"\n            unless typeof func is 'function'\n               throw new Error \"Allow rule #{type} must be a valid function.\"\n            @allows[type].push(func)\n\n      # Register application deny rules\n      deny: (denyOptions) ->\n         if 'update' of denyOptions\n            if denyOptions.write?\n               throw new Error 'Specifying both \"update\" and \"write\" deny rules is not permitted. Use \"write\" rules only.'\n            denyOptions.write = denyOptions.update\n            delete denyOptions.update\n            console.warn '***********************************************************************'\n            console.warn '** \"update\" allow/deny rules on fileCollections are now deprecated for'\n            console.warn '** use in securing HTTP POST/PUT requests. \"write\" allow/deny rules'\n            console.warn '** should be used instead.'\n            console.warn '**'\n            console.warn '** As of v0.3.0 all fileCollections implementing \"update\" allow/deny'\n            console.warn '** rules will begin returning 403 errors for POST/PUT requests.'\n            console.warn '**'\n            console.warn '** See:'\n            console.warn '** https://github.com/vsivsi/meteor-file-collection/#fcallowoptions'\n            console.warn '***********************************************************************'\n         for type, func of denyOptions\n            unless type of @denys\n               throw new Error \"Unrecognized deny rule type '#{type}'.\"\n            unless typeof func is 'function'\n               throw new Error \"Deny rule #{type} must be a valid function.\"\n            @denys[type].push(func)\n\n      insert: (file = {}, callback = undefined) ->\n         file = share.insert_func file, @chunkSize\n         super file, callback\n\n      # Update is dangerous! The checks inside attempt to keep you out of\n      # trouble with gridFS. Clients can't update at all. Be careful!\n      # Only metadata, filename, aliases and contentType should ever be changed\n      # directly by a server.\n\n      update: (selector, modifier, options = {}, callback = undefined) ->\n         if not callback? and typeof options is 'function'\n            callback = options\n            options = {}\n\n         if options.upsert?\n            err = new Error(\"Update does not support the upsert option\")\n            if callback?\n               return callback err\n            else\n               throw err\n\n         if reject_file_modifier(modifier) and not options.force\n            err = new Error(\"Modifying gridFS read-only document elements is a very bad idea!\")\n            if callback?\n               return callback err\n            else\n               throw err\n         else\n            super selector, modifier, options, callback\n\n      upsert: (selector, modifier, options = {}, callback = undefined) ->\n         if not callback? and typeof options is 'function'\n            callback = options\n         err = new Error \"File Collections do not support 'upsert'\"\n         if callback?\n            callback err\n         else\n            throw new Error \"File Collections do not support 'upsert'\"\n\n      upsertStream: (file, options = {}, callback = undefined) ->\n         if not callback? and typeof options is 'function'\n            callback = options\n            options = {}\n         unless options.mode is 'w' or options.mode is 'w+'\n            options.mode = 'w'\n         callback = share.bind_env callback\n\n         mods = {}\n         mods.filename = file.filename if file.filename?\n         mods.aliases = file.aliases if file.aliases?\n         mods.contentType = file.contentType if file.contentType?\n         mods.metadata = file.metadata if file.metadata?\n\n         # Make sure that we have an ID and it's valid\n         if file._id\n            found = @findOne {_id: file._id}\n\n         unless file._id and found\n            file._id = @insert mods\n         else\n            @update { _id: file._id }, { $set: mods }\n\n         writeStream = Meteor._wrapAsync(@gfs.createWriteStream.bind(@gfs))\n            root: @root\n            _id: mongodb.ObjectID(\"#{file._id}\")\n            mode: options.mode ? 'w'\n            timeOut: @lockOptions.timeOut\n            lockExpiration: @lockOptions.lockExpiration\n            pollingInterval: @lockOptions.pollingInterval\n\n         if callback?\n            writeStream.on 'close', (retFile) ->\n               callback(null, retFile)\n         return writeStream\n\n      findOneStream: (selector, options = {}, callback = undefined) ->\n         if not callback? and typeof options is 'function'\n            callback = options\n            options = {}\n\n         callback = share.bind_env callback\n         opts = {}\n         opts.sort = options.sort if options.sort?\n         opts.skip = options.skip if options.skip?\n         file = @findOne selector, opts\n         if file\n            readStream = Meteor._wrapAsync(@gfs.createReadStream.bind(@gfs))\n               root: @root\n               _id: mongodb.ObjectID(\"#{file._id}\")\n               timeOut: @lockOptions.timeOut\n               lockExpiration: @lockOptions.lockExpiration\n               pollingInterval: @lockOptions.pollingInterval\n            if callback?\n               readStream.on 'end', (retFile) ->\n                  callback(null, file)\n            return readStream\n         else\n            return null\n\n      remove: (selector, callback = undefined) ->\n         callback = share.bind_env callback\n         if selector?\n            @find(selector).forEach (file) =>\n               ret = Meteor._wrapAsync(@gfs.remove.bind(@gfs))({ _id: mongodb.ObjectID(\"#{file._id}\"), root: @root })\n            callback? and callback null, ret\n         else\n            callback? and callback new Error \"Remove with an empty selector is not supported\"\n\n      importFile: (filePath, file, callback) ->\n         callback = share.bind_env callback\n         filePath = path.normalize filePath\n         file ?= {}\n         file.filename ?= path.basename filePath\n         readStream = fs.createReadStream filePath\n         writeStream = @upsertStream file\n         readStream.pipe(writeStream)\n            .on('close', share.bind_env((d) -> callback(null, d)))\n            .on('error', share.bind_env(callback))\n\n      exportFile: (selector, filePath, callback) ->\n         callback = share.bind_env callback\n         filePath = path.normalize filePath\n         readStream = @findOneStream selector\n         writeStream = fs.createWriteStream filePath\n         readStream.pipe(writeStream)\n            .on('finish', share.bind_env(callback))\n            .on('error', share.bind_env(callback))\n\n   reject_file_modifier = (modifier) ->\n\n      forbidden = Match.OneOf(\n         Match.ObjectIncluding({ _id:        Match.Any })\n         Match.ObjectIncluding({ length:     Match.Any })\n         Match.ObjectIncluding({ chunkSize:  Match.Any })\n         Match.ObjectIncluding({ md5:        Match.Any })\n         Match.ObjectIncluding({ uploadDate: Match.Any })\n      )\n\n      required = Match.OneOf(\n         Match.ObjectIncluding({ _id:         Match.Any })\n         Match.ObjectIncluding({ length:      Match.Any })\n         Match.ObjectIncluding({ chunkSize:   Match.Any })\n         Match.ObjectIncluding({ md5:         Match.Any })\n         Match.ObjectIncluding({ uploadDate:  Match.Any })\n         Match.ObjectIncluding({ metadata:    Match.Any })\n         Match.ObjectIncluding({ aliases:     Match.Any })\n         Match.ObjectIncluding({ filename:    Match.Any })\n         Match.ObjectIncluding({ contentType: Match.Any })\n      )\n\n      return Match.test modifier, Match.OneOf(\n         Match.ObjectIncluding({ $set: forbidden })\n         Match.ObjectIncluding({ $unset: required})\n         Match.ObjectIncluding({ $inc: forbidden})\n         Match.ObjectIncluding({ $mul: forbidden})\n         Match.ObjectIncluding({ $bit: forbidden})\n         Match.ObjectIncluding({ $min: forbidden})\n         Match.ObjectIncluding({ $max: forbidden})\n         Match.ObjectIncluding({ $rename: required})\n         Match.ObjectIncluding({ $currentDate: forbidden})\n      )\n\n   # Encapsulating class for deprecation warning\n   class fileCollection extends FileCollection\n      constructor: (r = share.defaultRoot, o = {}) ->\n         unless @ instanceof fileCollection\n            return new fileCollection(r, o)\n         console.warn '******************************************************'\n         console.warn '** The \"fileCollection\" global object is deprecated'\n         console.warn '** It will be removed in v0.3.0'\n         console.warn '**'\n         console.warn '** Use \"FileCollection\" instead (with capital \"F\")'\n         console.warn '******************************************************'\n         super r, o","############################################################################\n#     Copyright (C) 2014 by Vaughn Iverson\n#     fileCollection is free software released under the MIT/X11 license.\n#     See included LICENSE file for details.\n############################################################################\n\nif Meteor.isServer\n\n   express = Npm.require 'express'\n   mongodb = Npm.require 'mongodb'\n   grid = Npm.require 'gridfs-locking-stream'\n   gridLocks = Npm.require 'gridfs-locks'\n   dicer = Npm.require 'dicer'\n   async = Npm.require 'async'\n\n   # This function checks to see if all of the parts of a Resumable.js uploaded file are now in the gridFS\n   # Collection. If so, it completes the file by moving all of the chunks to the correct file and cleans up\n\n   check_order = (file, callback) ->\n      fileId = mongodb.ObjectID(\"#{file.metadata._Resumable.resumableIdentifier}\")\n      lock = gridLocks.Lock(fileId, @locks, {}).obtainWriteLock()\n      lock.on 'locked', () =>\n         files = @db.collection \"#{@root}.files\"\n\n         files.find({'metadata._Resumable.resumableIdentifier': file.metadata._Resumable.resumableIdentifier},\n                    { sort: { 'metadata._Resumable.resumableChunkNumber': 1 }}).toArray (err, parts) =>\n            return callback(err) if err\n            unless parts.length >= 1\n               return lock.releaseLock()\n\n            lastPart = 0\n            goodParts = parts.filter (el) ->\n               l = lastPart\n               lastPart = el.metadata?._Resumable.resumableChunkNumber\n               return el.length is el.metadata?._Resumable.resumableCurrentChunkSize and lastPart is l + 1\n\n            unless goodParts.length is goodParts[0].metadata._Resumable.resumableTotalChunks\n               return lock.releaseLock()\n\n            # Manipulate the chunks and files collections directly under write lock\n            chunks = @db.collection \"#{@root}.chunks\"\n            totalSize = goodParts[0].metadata._Resumable.resumableTotalSize\n            async.eachLimit goodParts, 3,\n               (part, cb) =>\n                  partId = mongodb.ObjectID(\"#{part._id}\")\n                  partlock = gridLocks.Lock(partId, @locks, {}).obtainWriteLock()\n                  partlock.on 'locked', () ->\n                     async.series [\n                           # Move the chunks to the correct file\n                           (cb) -> chunks.update { files_id: partId, n: 0 },\n                              { $set: { files_id: fileId, n: part.metadata._Resumable.resumableChunkNumber - 1 }}\n                              cb\n                           # Delete the temporary chunk file documents\n                           (cb) -> files.remove { _id: partId }, cb\n                        ],\n                        (err, res) =>\n                           return cb(err) if err\n                           unless part.metadata._Resumable.resumableChunkNumber is part.metadata._Resumable.resumableTotalChunks\n                              partlock.removeLock()\n                              cb()\n                           else\n                              # check for a final hanging gridfs chunk\n                              chunks.update { files_id: partId, n: 1 },\n                                 { $set: { files_id: fileId, n: part.metadata._Resumable.resumableChunkNumber }}\n                                 (err, res) ->\n                                    return cb(err) if err\n                                    partlock.removeLock()\n                                    cb()\n                  partlock.on 'timed-out', () -> callback new Error 'Partlock timed out!'\n                  partlock.on 'error', (err) -> callback error\n               (err) =>\n                  return callback err if err\n                  files.update { _id: fileId }, { $set: { length: totalSize }},\n                     (err, res) =>\n                        return callback err if err\n                        lock.releaseLock()\n                        # Now open the file to update the md5 hash...\n                        @gfs.createWriteStream { _id: fileId, filename: file.metadata._Resumable.resumableFilename }, (err, stream) ->\n                           return callback err if err\n                           stream.write('')\n                           stream.end()\n\n      lock.on 'timed-out', () -> throw \"File Lock timed out\"\n\n   # Fast MIME Multipart parsing of the Resumable.js HTTP POST request bodies\n\n   dice_resumable_multipart = (req, callback) ->\n      callback = share.bind_env callback\n      boundary = share.find_mime_boundary req\n\n      unless boundary\n         console.error 'No MIME multipart boundary found for dicer'\n         err = new Error('No MIME multipart boundary found for dicer')\n         return callback err\n\n      resumable = {}\n      resCount = 0\n      fileStream = null\n\n      d = new dicer { boundary: boundary }\n\n      d.on 'part', (p) ->\n         p.on 'header', (header) ->\n            RE_RESUMABLE = /^form-data; name=\"(resumable[^\"]+)\"/\n            RE_FILE = /^form-data; name=\"file\"; filename=\"blob\"/\n            RE_NUMBER = /Size|Chunk/\n            for k, v of header\n               if k is 'content-disposition'\n                  if resVar = RE_RESUMABLE.exec(v)?[1]\n                     resData = ''\n                     resCount++\n\n                     p.on 'data', (data) -> resData += data.toString()\n\n                     p.on 'end', () ->\n                        resCount--\n                        unless RE_NUMBER.test(resVar)\n                           resumable[resVar] = resData\n                        else\n                           resumable[resVar] = parseInt(resData)\n                        if resCount is 0 and fileStream\n                           callback(null, resumable, fileStream)\n\n                     p.on 'error', (err) ->\n                        console.error('Error in Dicer while streaming: \\n', err)\n                        callback err\n\n                  else if RE_FILE.exec(v)\n                     fileStream = p\n                     if resCount is 0\n                        callback(null, resumable, fileStream)\n\n      d.on 'error', (err) ->\n        console.error('Error in Dicer: \\n', err)\n        callback err\n\n      d.on 'finish', () ->\n         unless fileStream\n            callback(new Error \"No file blob in multipart POST\")\n\n      req.pipe(d)\n\n   # Handle HTTP POST requests from Resumable.js\n\n   resumable_post = (req, res, next) ->\n\n      # Parse the multipart body\n      dice_resumable_multipart.bind(@) req, (err, resumable, fileStream) =>\n         # Error parsing\n         if err\n            res.writeHead(500)\n            res.end()\n            return\n         else\n            # This khas to be a resumable POST\n            unless resumable\n               res.writeHead(501)\n               res.end()\n               return\n\n            # See if this file already exists in some form\n            try\n               ID = new Meteor.Collection.ObjectID(resumable.resumableIdentifier)\n            catch\n               res.writeHead(501)\n               res.end()\n               return\n\n            file = @findOne { _id: ID }\n\n            # File must exist to write to it\n            unless file\n               res.writeHead(404)\n               res.end()\n               return\n\n            # Make sure we have permission\n            unless share.check_allow_deny.bind(@) 'write', req.meteorUserId, file, ['length', 'md5']\n               res.writeHead(404)\n               res.end()\n               return\n\n            # Sanity check the chunk sizes that are critical to reassembling the file from parts\n            unless ((file.chunkSize is resumable.resumableChunkSize) and\n                    (resumable.resumableCurrentChunkSize is resumable.resumableChunkSize) or\n                    ((resumable.resumableChunkNumber is resumable.resumableTotalChunks) and\n                     (resumable.resumableCurrentChunkSize < 2*resumable.resumableChunkSize)))\n\n               res.writeHead(501)\n               res.end()\n               return\n\n            # Everything looks good, so write this part\n            file.metadata._Resumable = resumable\n            writeStream = @upsertStream\n               filename: \"_Resumable_#{resumable.resumableIdentifier}_#{resumable.resumableChunkNumber}_#{resumable.resumableTotalChunks}\"\n               metadata: file.metadata\n\n            unless writeStream\n               res.writeHead(404)\n               res.end()\n               return\n\n            fileStream.pipe(writeStream)\n               .on 'close', share.bind_env((file) =>\n                  res.writeHead(200)\n                  res.end()\n                  # Check to see if all of the parts are now available and can be reassembled\n                  check_order.bind(@)(file, (err) ->\n                     console.error \"Error reassembling chunks of resumable.js upload\", err\n                     ))\n               .on 'error', share.bind_env((err) =>\n                  console.error \"Piping Error!\", err\n                  res.writeHead(500)\n                  res.end())\n\n   # This handles Resumable.js \"test GET\" requests, that exist to determine if a part is already uploaded\n\n   resumable_get = (req, res, next) ->\n\n      # Query to see if this entire file is already complete, or if this part is complete in the GridFS collection\n      file = @findOne(\n         $or: [\n            {\n               _id: req.query.resumableIdentifier\n               length: req.query.resumableTotalSize\n            }\n            {\n               length: req.query.resumableCurrentChunkSize\n               'metadata._Resumable.resumableIdentifier': req.query.resumableIdentifier\n               'metadata._Resumable.resumableChunkNumber': req.query.resumableChunkNumber\n            }\n         ]\n      )\n\n      # If not, tell Resumable.js we don't have it yet\n      unless file\n         res.writeHead(404)\n         res.end()\n         return\n\n      # Make sure we'll allow the POST that will come subsequently come from this...\n      unless share.check_allow_deny.bind(@) 'write', req.meteorUserId, file, ['length', 'md5']\n         res.writeHead(404)\n         res.end()\n         return\n\n      # All is good\n      res.writeHead(200)\n      res.end()\n\n\n   # Setup the GET and POST HTTP REST paths for Resumable.js in express\n   share.setup_resumable = () ->\n\t    r = express.Router()\n\t    r.route('/_resumable')\n\t       .get(resumable_get.bind(@))\n\t       .post(resumable_post.bind(@))\n\t       .all((req, res, next) ->\n\t          res.writeHead(500)\n\t          res.end())\n\t    WebApp.rawConnectHandlers.use(@baseURL, share.bind_env(r))\n","############################################################################\n#     Copyright (C) 2014 by Vaughn Iverson\n#     fileCollection is free software released under the MIT/X11 license.\n#     See included LICENSE file for details.\n############################################################################\n\nif Meteor.isServer\n\n   express = Npm.require 'express'\n   cookieParser = Npm.require 'cookie-parser'\n   mongodb = Npm.require 'mongodb'\n   grid = Npm.require 'gridfs-locking-stream'\n   gridLocks = Npm.require 'gridfs-locks'\n   dicer = Npm.require 'dicer'\n\n   # Fast MIME Multipart parsing of generic HTTP POST request bodies\n\n   dice_multipart = (req, callback) ->\n      callback = share.bind_env callback\n      boundary = share.find_mime_boundary req\n\n      unless boundary\n        err = new Error('No MIME multipart boundary found for dicer')\n        return callback err\n\n      fileStream = null\n\n      d = new dicer { boundary: boundary }\n\n      d.on 'part', (p) ->\n         p.on 'header', (header) ->\n            RE_FILE = /^form-data; name=\"file\"; filename=\"([^\"]+)\"/\n            for k, v of header\n               if k is 'content-type'\n                  ft = v\n               if k is 'content-disposition'\n                  if re = RE_FILE.exec(v)\n                     fileStream = p\n                     fn = re[1]\n            callback(null, fileStream, fn, ft)\n\n      d.on 'error', (err) ->\n        callback err\n\n      d.on 'finish', () ->\n         unless fileStream\n            callback(new Error \"No file in multipart POST\")\n\n      req.pipe(d)\n\n   # Handle a generic HTTP POST file upload\n\n   # This curl command should be properly handled by this code:\n   # % curl -X POST 'http://127.0.0.1:3000/gridfs/fs/38a14c8fef2d6cef53c70792' \\\n   #        -F 'file=@\"universe.png\";type=image/png' -H 'X-Auth-Token: zrtrotHrDzwA4nC5'\n\n   post = (req, res, next) ->\n\n      # Parse MIME Multipart request body\n      dice_multipart req, (err, fileStream, filename, filetype) =>\n         if err\n            console.warn('Error parsing POST body', err)\n            res.writeHead(500)\n            res.end()\n            return\n\n         # Handle filename or filetype data when included\n         req.gridFS.contentType = filetype if filetype\n         req.gridFS.filename = filename if filename\n\n         # Write the file data.  No chunks here, this is the whole thing\n         stream = @upsertStream req.gridFS\n         if stream\n            fileStream.pipe(stream)\n               .on 'close', () ->\n                  res.writeHead(200)\n                  res.end()\n               .on 'error', (err) ->\n                  res.writeHead(500)\n                  res.end()\n         else\n            res.writeHead(410)\n            res.end()\n\n   # Handle a generic HTTP GET request\n   # This also handles HEAD requests\n   # If the request URL has a \"?download=true\" query, then a browser download response is triggered\n\n   get = (req, res, next) ->\n\n      headers =\n         'Content-type': req.gridFS.contentType\n         'Content-MD5': req.gridFS.md5\n         'Content-Length': req.gridFS.length\n         'Last-Modified': req.gridFS.uploadDate.toUTCString()\n\n      # Trigger download in browser, optionally specify filename.\n      if req.query.download or req.query.filename\n         filename = req.query.filename ? req.gridFS.filename\n         headers['Content-Disposition'] = \"attachment; filename=\\\"#{filename}\\\"\"\n\n      # HEADs don't have a body\n      if req.method is 'HEAD'\n         res.writeHead 204, headers\n         res.end()\n         return\n\n      # Send the file\n      stream = @findOneStream { _id: req.gridFS._id }\n      if stream\n         res.writeHead 200, headers\n         stream.pipe(res)\n               .on 'close', () ->\n                  res.end()\n               .on 'error', (err) ->\n                  res.writeHead(500)\n                  res.end(err)\n      else\n         res.writeHead(410)\n         res.end()\n\n   # Handle a generic HTTP PUT request\n\n   # This curl command should be properly handled by this code:\n   # % curl -X PUT 'http://127.0.0.1:3000/gridfs/fs/7868f3df8425ae68a572b334' \\\n   #        -T \"universe.png\" -H 'Content-Type: image/png' -H 'X-Auth-Token: tEPAwXbGwgfGiJL35'\n\n   put = (req, res, next) ->\n\n      # Handle content type if it's present\n      if req.headers['content-type']\n         req.gridFS.contentType = req.headers['content-type']\n\n      # Write the file\n      stream = @upsertStream req.gridFS\n      if stream\n         req.pipe(stream)\n            .on 'close', () ->\n               res.writeHead(200)\n               res.end()\n            .on 'error', (err) ->\n               res.writeHead(500)\n               res.end(err)\n      else\n         res.writeHead(404)\n         res.end(\"#{req.url} Not found!\")\n\n   # Handle a generic HTTP DELETE request\n\n   # This curl command should be properly handled by this code:\n   # % curl -X DELETE 'http://127.0.0.1:3000/gridfs/fs/7868f3df8425ae68a572b334' \\\n   #        -H 'X-Auth-Token: tEPAwXbGwgfGiJL35'\n\n   del = (req, res, next) ->\n\n      @remove req.gridFS\n      res.writeHead(204)\n      res.end()\n\n   # Setup all of the application specified paths and file lookups in express\n   # Also performs allow/deny permission checks for POST/PUT/DELETE\n\n   build_access_point = (http) ->\n\n      # Loop over the app supplied http paths\n      for r in http\n\n         # Add an express middleware for each application REST path\n         @router[r.method] r.path, do (r) =>\n\n            getDep = true\n\n            (req, res, next) =>\n\n               safeObjectID = (s) ->\n                  if s.match /^[0-9a-f]{24}$/i  # Validate that _id is a 12 byte hex string\n                     new Meteor.Collection.ObjectID s\n                  else\n                     null\n\n               # params and queries literally named \"_id\" get converted to ObjectIDs automatically\n               req.params._id = safeObjectID(req.params._id) if req.params?._id?\n               req.query._id = safeObjectID(req.query._id) if req.query?._id?\n\n               # Build the path lookup mongoDB query object for the gridFS files collection\n               lookup = r.lookup? req.params or {}, req.query or {}\n               unless lookup?\n                  # No lookup returned, so bailing\n                  res.writeHead(500)\n                  res.end()\n                  return\n               else\n                  # Perform the collection query\n                  req.gridFS = @findOne lookup\n                  unless req.gridFS\n                     res.writeHead(404)\n                     res.end()\n                     return\n\n                  # Make sure that the requested method is permitted for this file in the allow/deny rules\n                  switch req.method\n                     when 'HEAD', 'GET'\n                        unless @allows.read.length is 0 and @denys.read.length is 0 or\n                               share.check_allow_deny.bind(@) 'read', req.meteorUserId, req.gridFS\n                           res.writeHead(403)\n                           res.end()\n                           return\n                        else if @allows.read.length is 0 and @denys.read.length is 0 and getDep\n                           console.warn '***********************************************************************'\n                           console.warn '** HTTP GET to a fileCollection without one or more \"read\"'\n                           console.warn '** \"allow/deny rules is deprecated.'\n                           console.warn '**'\n                           console.warn '** As of v0.3.0 all fileCollections implementing HTTP GET will need to'\n                           console.warn '** implement at least one \"read\" allow rule that returns \"true\".'\n                           console.warn '**'\n                           console.warn '** See:'\n                           console.warn '** https://github.com/vsivsi/meteor-file-collection/#fcallowoptions'\n                           console.warn '***********************************************************************'\n                           getDep = false\n                     when 'POST', 'PUT'\n                        unless share.check_allow_deny.bind(@) 'write', req.meteorUserId, req.gridFS\n                           res.writeHead(403)\n                           res.end()\n                           return\n                     when 'DELETE'\n                        unless share.check_allow_deny.bind(@) 'remove', req.meteorUserId, req.gridFS\n                           res.writeHead(403)\n                           res.end()\n                           return\n                     else\n                        res.writeHead(500)\n                        res.end()\n                        return\n\n                  next()\n\n      # Add all of generic request handling methods to the express route\n      @router.route('/*')\n         .all (req, res, next) ->  # Make sure a file has been selected by some rule\n            unless req.gridFS\n               res.writeHead(404)\n               res.end()\n               return\n            next()\n         .head(get.bind(@))   # Generic HTTP method handlers\n         .get(get.bind(@))\n         .put(put.bind(@))\n         .post(post.bind(@))\n         .delete(del.bind(@))\n         .all (req, res, next) ->   # Unkown methods are denied\n            res.writeHead(500)\n            res.end()\n\n   # Performs a meteor userId lookup by hased access token\n\n   lookup_userId_by_token = (authToken) ->\n      userDoc = Meteor.users?.findOne\n         'services.resume.loginTokens':\n            $elemMatch:\n               hashedToken: Accounts?._hashLoginToken(authToken)\n      return userDoc?._id or null\n\n   # Express middleware to convert a Meteor access token provided in an HTTP request\n   # to a Meteor userId attached to the request object as req.meteorUserId\n\n   tokenWarning = false\n\n   handle_auth = (req, res, next) ->\n      unless req.meteorUserId?\n         # Lookup userId if token is provided in HTTP heder\n         if req.headers?['x-auth-token']?\n            req.meteorUserId = lookup_userId_by_token req.headers['x-auth-token']\n         # Or as a URL query of the same name\n         else if req.cookies?['X-Auth-Token']?\n            req.meteorUserId = lookup_userId_by_token req.cookies['X-Auth-Token']\n         else if req.query?['x-auth-token']?\n            req.meteorUserId = lookup_userId_by_token req.query['x-auth-token']\n            unless tokenWarning\n               tokenWarning = true\n               console.warn '***********************************************************************'\n               console.warn '** Sending x-auth-token using URL queries is inherently dangerous and'\n               console.warn '** support for it is now deprecated. Please transition to using'\n               console.warn '** either the X-Auth-Token HTTP Header or HTTP Cookie.'\n               console.warn '**'\n               console.warn '** As of v0.3.0 all support for using URL queries to send x-auth-token'\n               console.warn '** values will be removed.'\n               console.warn '***********************************************************************'\n      next()\n\n   # Set up all of the middleware, including optional support for Resumable.js chunked uploads\n   share.setupHttpAccess = (options) ->\n         r = express.Router()\n         r.use express.query()   # Parse URL query strings\n         r.use cookieParser()    # Parse cookies\n         r.use handle_auth       # Turn x-auth-tokens into Meteor userIds\n         WebApp.rawConnectHandlers.use(@baseURL, share.bind_env(r))\n\n         # Set up support for resumable.js if requested\n         if options.resumable\n            share.setup_resumable.bind(@)()\n\n         # Setup application HTTP REST interface\n         @router = express.Router()\n         build_access_point.bind(@)(options.http, @router)\n         WebApp.rawConnectHandlers.use(@baseURL, share.bind_env(@router))\n"]}