)]}'
{"version":3,"file":"/packages/dsyko:jquery-ui-touch-punch.js","sources":["dsyko:jquery-ui-touch-punch/touch-punch/jquery.ui.touch-punch.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,G;AACA,8B;AACA,E;AACA,oC;AACA,yD;AACA,E;AACA,W;AACA,uB;AACA,sB;AACA,G;AACA,e;;AAEA,yB;AACA,6C;;AAEA,0C;AACA,yB;AACA,W;AACA,G;;AAEA,wC;AACA,yC;AACA,+C;AACA,mB;;AAEA,K;AACA,gE;AACA,wC;AACA,gE;AACA,K;AACA,sD;;AAEA,gC;AACA,iD;AACA,a;AACA,K;;AAEA,2B;;AAEA,sD;AACA,6D;AACA,I;AACA,+E;AACA,kC;AACA,+B;AACA,sD;AACA,sD;AACA,sD;AACA,sD;AACA,sD;AACA,sD;AACA,sD;AACA,sD;AACA,sD;AACA,sD;AACA,sD;AACA,sD;AACA,sD;AACA,sD;AACA,M;;AAEA,yD;AACA,+C;AACA,G;;AAEA,K;AACA,oD;AACA,gE;AACA,K;AACA,6C;;AAEA,oB;;AAEA,kE;AACA,qF;AACA,a;AACA,K;;AAEA,4E;AACA,wB;;AAEA,6D;AACA,6B;;AAEA,mC;AACA,2C;;AAEA,mC;AACA,2C;;AAEA,mC;AACA,2C;AACA,I;;AAEA,K;AACA,mD;AACA,yD;AACA,K;AACA,4C;;AAEA,kC;AACA,wB;AACA,a;AACA,K;;AAEA,kC;AACA,4B;;AAEA,mC;AACA,2C;AACA,I;;AAEA,K;AACA,kD;AACA,wD;AACA,K;AACA,2C;;AAEA,kC;AACA,wB;AACA,a;AACA,K;;AAEA,iC;AACA,yC;;AAEA,kC;AACA,0C;;AAEA,uE;AACA,4B;;AAEA,iC;AACA,yC;AACA,K;;AAEA,uE;AACA,yB;AACA,I;;AAEA,K;AACA,8E;AACA,wE;AACA,yE;AACA,2C;AACA,K;AACA,uC;AACA,I;AACA,oB;;AAEA,0D;AACA,uB;AACA,+C;AACA,6C;AACA,0C;AACA,O;;AAEA,+C;AACA,0B;AACA,I;;AAEA,K;AACA,oC;AACA,K;AACA,0C;AACA,I;AACA,oB;;AAEA,0D;AACA,yB;AACA,+C;AACA,6C;AACA,0C;AACA,O;;AAEA,kD;AACA,6B;AACA,I;;AAEA,W","sourcesContent":["/*!\n * jQuery UI Touch Punch 0.2.3\n *\n * Copyright 2011â€“2014, Dave Furfero\n * Dual licensed under the MIT or GPL Version 2 licenses.\n *\n * Depends:\n *  jquery.ui.widget.js\n *  jquery.ui.mouse.js\n */\n(function ($) {\n\n  // Detect touch support\n  $.support.touch = 'ontouchend' in document;\n\n  // Ignore browsers without touch support\n  if (!$.support.touch) {\n    return;\n  }\n\n  var mouseProto = $.ui.mouse.prototype,\n      _mouseInit = mouseProto._mouseInit,\n      _mouseDestroy = mouseProto._mouseDestroy,\n      touchHandled;\n\n  /**\n   * Simulate a mouse event based on a corresponding touch event\n   * @param {Object} event A touch event\n   * @param {String} simulatedType The corresponding mouse event\n   */\n  function simulateMouseEvent (event, simulatedType) {\n\n    // Ignore multi-touch events\n    if (event.originalEvent.touches.length > 1) {\n      return;\n    }\n\n    event.preventDefault();\n\n    var touch = event.originalEvent.changedTouches[0],\n        simulatedEvent = document.createEvent('MouseEvents');\n    \n    // Initialize the simulated mouse event using the touch event's coordinates\n    simulatedEvent.initMouseEvent(\n      simulatedType,    // type\n      true,             // bubbles                    \n      true,             // cancelable                 \n      window,           // view                       \n      1,                // detail                     \n      touch.screenX,    // screenX                    \n      touch.screenY,    // screenY                    \n      touch.clientX,    // clientX                    \n      touch.clientY,    // clientY                    \n      false,            // ctrlKey                    \n      false,            // altKey                     \n      false,            // shiftKey                   \n      false,            // metaKey                    \n      0,                // button                     \n      null              // relatedTarget              \n    );\n\n    // Dispatch the simulated event to the target element\n    event.target.dispatchEvent(simulatedEvent);\n  }\n\n  /**\n   * Handle the jQuery UI widget's touchstart events\n   * @param {Object} event The widget element's touchstart event\n   */\n  mouseProto._touchStart = function (event) {\n\n    var self = this;\n\n    // Ignore the event if another widget is already being handled\n    if (touchHandled || !self._mouseCapture(event.originalEvent.changedTouches[0])) {\n      return;\n    }\n\n    // Set the flag to prevent other widgets from inheriting the touch event\n    touchHandled = true;\n\n    // Track movement to determine if interaction was a click\n    self._touchMoved = false;\n\n    // Simulate the mouseover event\n    simulateMouseEvent(event, 'mouseover');\n\n    // Simulate the mousemove event\n    simulateMouseEvent(event, 'mousemove');\n\n    // Simulate the mousedown event\n    simulateMouseEvent(event, 'mousedown');\n  };\n\n  /**\n   * Handle the jQuery UI widget's touchmove events\n   * @param {Object} event The document's touchmove event\n   */\n  mouseProto._touchMove = function (event) {\n\n    // Ignore event if not handled\n    if (!touchHandled) {\n      return;\n    }\n\n    // Interaction was not a click\n    this._touchMoved = true;\n\n    // Simulate the mousemove event\n    simulateMouseEvent(event, 'mousemove');\n  };\n\n  /**\n   * Handle the jQuery UI widget's touchend events\n   * @param {Object} event The document's touchend event\n   */\n  mouseProto._touchEnd = function (event) {\n\n    // Ignore event if not handled\n    if (!touchHandled) {\n      return;\n    }\n\n    // Simulate the mouseup event\n    simulateMouseEvent(event, 'mouseup');\n\n    // Simulate the mouseout event\n    simulateMouseEvent(event, 'mouseout');\n\n    // If the touch interaction did not move, it should trigger a click\n    if (!this._touchMoved) {\n\n      // Simulate the click event\n      simulateMouseEvent(event, 'click');\n    }\n\n    // Unset the flag to allow other widgets to inherit the touch event\n    touchHandled = false;\n  };\n\n  /**\n   * A duck punch of the $.ui.mouse _mouseInit method to support touch events.\n   * This method extends the widget with bound touch event handlers that\n   * translate touch events to mouse events and pass them to the widget's\n   * original mouse event handling methods.\n   */\n  mouseProto._mouseInit = function () {\n    \n    var self = this;\n\n    // Delegate the touch handlers to the widget's element\n    self.element.bind({\n      touchstart: $.proxy(self, '_touchStart'),\n      touchmove: $.proxy(self, '_touchMove'),\n      touchend: $.proxy(self, '_touchEnd')\n    });\n\n    // Call the original $.ui.mouse init method\n    _mouseInit.call(self);\n  };\n\n  /**\n   * Remove the touch event handlers\n   */\n  mouseProto._mouseDestroy = function () {\n    \n    var self = this;\n\n    // Delegate the touch handlers to the widget's element\n    self.element.unbind({\n      touchstart: $.proxy(self, '_touchStart'),\n      touchmove: $.proxy(self, '_touchMove'),\n      touchend: $.proxy(self, '_touchEnd')\n    });\n\n    // Call the original $.ui.mouse destroy method\n    _mouseDestroy.call(self);\n  };\n\n})(jQuery);"]}